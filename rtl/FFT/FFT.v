// -------------------------------------------------------------
// 
// File Name: hdlsrc\tb_FFT\FFT.v
// Created: 2023-02-08 00:35:50
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FFT
// Source Path: tb_FFT/DUT/FFT
// Hierarchy Level: 1
// 
// FFT
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FFT
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut_re,
           dataOut_im,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] dataIn;  // sfix16_En13
  input   validIn;
  output  signed [25:0] dataOut_re;  // sfix26_En13
  output  signed [25:0] dataOut_im;  // sfix26_En13
  output  validOut;


  wire softReset;
  reg signed [15:0] intdelay_reg [0:2];  // sfix16 [3]
  wire signed [15:0] intdelay_reg_next [0:2];  // sfix16_En13 [3]
  wire signed [15:0] din_1_1_re_dly;  // sfix16_En13
  wire signed [15:0] dtc_im;  // sfix16_En13
  reg signed [15:0] intdelay_reg_1 [0:2];  // sfix16 [3]
  wire signed [15:0] intdelay_reg_next_1 [0:2];  // sfix16_En13 [3]
  wire signed [15:0] din_1_1_im_dly;  // sfix16_En13
  reg  [0:2] intdelay_reg_2;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_2;  // ufix1 [3]
  wire din_1_vld_dly;
  wire dinXTwdl_1_1_vld;
  wire [8:0] rd_1_Addr;  // ufix9
  wire rd_1_Enb;
  wire proc_1_enb;
  wire signed [16:0] dout_1_1_re;  // sfix17_En13
  wire signed [16:0] dout_1_1_im;  // sfix17_En13
  wire dout_1_1_vld;
  wire dinXTwdl_2_1_vld;
  wire [7:0] rd_2_Addr;  // ufix8
  wire rd_2_Enb;
  wire proc_2_enb;
  wire multiply_2_J;
  wire signed [17:0] dout_2_1_re;  // sfix18_En13
  wire signed [17:0] dout_2_1_im;  // sfix18_En13
  wire dout_2_1_vld;
  reg signed [17:0] intdelay_reg_3 [0:2];  // sfix18 [3]
  wire signed [17:0] intdelay_reg_next_3 [0:2];  // sfix18_En13 [3]
  wire signed [17:0] din_3_1_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_4 [0:2];  // sfix18 [3]
  wire signed [17:0] intdelay_reg_next_4 [0:2];  // sfix18_En13 [3]
  wire signed [17:0] din_3_1_im_dly;  // sfix18_En13
  reg  [0:2] intdelay_reg_5;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_5;  // ufix1 [3]
  wire din_3_vld_dly;
  wire signed [15:0] twdl_3_1_re;  // sfix16_En14
  wire signed [15:0] twdl_3_1_im;  // sfix16_En14
  wire dinXTwdl_3_1_vld;
  wire [6:0] rd_3_Addr;  // ufix7
  wire rd_3_Enb;
  wire proc_3_enb;
  wire signed [18:0] dout_3_1_re;  // sfix19_En13
  wire signed [18:0] dout_3_1_im;  // sfix19_En13
  wire dout_3_1_vld;
  wire dinXTwdl_4_1_vld;
  wire [5:0] rd_4_Addr;  // ufix6
  wire rd_4_Enb;
  wire proc_4_enb;
  wire multiply_4_J;
  wire signed [19:0] dout_4_1_re;  // sfix20_En13
  wire signed [19:0] dout_4_1_im;  // sfix20_En13
  wire dout_4_1_vld;
  reg signed [19:0] intdelay_reg_6 [0:2];  // sfix20 [3]
  wire signed [19:0] intdelay_reg_next_6 [0:2];  // sfix20_En13 [3]
  wire signed [19:0] din_5_1_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_7 [0:2];  // sfix20 [3]
  wire signed [19:0] intdelay_reg_next_7 [0:2];  // sfix20_En13 [3]
  wire signed [19:0] din_5_1_im_dly;  // sfix20_En13
  reg  [0:2] intdelay_reg_8;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_8;  // ufix1 [3]
  wire din_5_vld_dly;
  wire signed [15:0] twdl_5_1_re;  // sfix16_En14
  wire signed [15:0] twdl_5_1_im;  // sfix16_En14
  wire dinXTwdl_5_1_vld;
  wire [4:0] rd_5_Addr;  // ufix5
  wire rd_5_Enb;
  wire proc_5_enb;
  wire signed [20:0] dout_5_1_re;  // sfix21_En13
  wire signed [20:0] dout_5_1_im;  // sfix21_En13
  wire dout_5_1_vld;
  wire dinXTwdl_6_1_vld;
  wire [3:0] rd_6_Addr;  // ufix4
  wire rd_6_Enb;
  wire proc_6_enb;
  wire multiply_6_J;
  wire signed [21:0] dout_6_1_re;  // sfix22_En13
  wire signed [21:0] dout_6_1_im;  // sfix22_En13
  wire dout_6_1_vld;
  reg signed [21:0] intdelay_reg_9 [0:2];  // sfix22 [3]
  wire signed [21:0] intdelay_reg_next_9 [0:2];  // sfix22_En13 [3]
  wire signed [21:0] din_7_1_re_dly;  // sfix22_En13
  reg signed [21:0] intdelay_reg_10 [0:2];  // sfix22 [3]
  wire signed [21:0] intdelay_reg_next_10 [0:2];  // sfix22_En13 [3]
  wire signed [21:0] din_7_1_im_dly;  // sfix22_En13
  reg  [0:2] intdelay_reg_11;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_11;  // ufix1 [3]
  wire din_7_vld_dly;
  wire signed [15:0] twdl_7_1_re;  // sfix16_En14
  wire signed [15:0] twdl_7_1_im;  // sfix16_En14
  wire dinXTwdl_7_1_vld;
  wire [2:0] rd_7_Addr;  // ufix3
  wire rd_7_Enb;
  wire proc_7_enb;
  wire signed [22:0] dout_7_1_re;  // sfix23_En13
  wire signed [22:0] dout_7_1_im;  // sfix23_En13
  wire dout_7_1_vld;
  wire dinXTwdl_8_1_vld;
  wire [1:0] rd_8_Addr;  // ufix2
  wire rd_8_Enb;
  wire proc_8_enb;
  wire multiply_8_J;
  wire signed [23:0] dout_8_1_re;  // sfix24_En13
  wire signed [23:0] dout_8_1_im;  // sfix24_En13
  wire dout_8_1_vld;
  reg signed [23:0] intdelay_reg_12 [0:2];  // sfix24 [3]
  wire signed [23:0] intdelay_reg_next_12 [0:2];  // sfix24_En13 [3]
  wire signed [23:0] din_9_1_re_dly;  // sfix24_En13
  reg signed [23:0] intdelay_reg_13 [0:2];  // sfix24 [3]
  wire signed [23:0] intdelay_reg_next_13 [0:2];  // sfix24_En13 [3]
  wire signed [23:0] din_9_1_im_dly;  // sfix24_En13
  reg  [0:2] intdelay_reg_14;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_14;  // ufix1 [3]
  wire din_9_vld_dly;
  wire signed [15:0] twdl_9_1_re;  // sfix16_En14
  wire signed [15:0] twdl_9_1_im;  // sfix16_En14
  wire dinXTwdl_9_1_vld;
  wire rd_9_Addr;  // ufix1
  wire rd_9_Enb;
  wire proc_9_enb;
  wire signed [24:0] dout_9_1_re;  // sfix25_En13
  wire signed [24:0] dout_9_1_im;  // sfix25_En13
  wire dout_9_1_vld;
  wire dinXTwdl_10_1_vld;
  wire rd_10_Addr;
  wire rd_10_Enb;
  wire proc_10_enb;
  wire multiply_10_J;
  wire signed [25:0] dout_10_1_re;  // sfix26_En13
  wire signed [25:0] dout_10_1_im;  // sfix26_En13
  wire dout_10_1_vld;
  wire signed [25:0] dout_re1;  // sfix26_En13
  wire signed [25:0] dout_im1;  // sfix26_En13
  wire dout_vld1;


  assign softReset = 1'b0;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 16'sb0000000000000000;
        intdelay_reg[1] <= 16'sb0000000000000000;
        intdelay_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg[0] <= 16'sb0000000000000000;
            intdelay_reg[1] <= 16'sb0000000000000000;
            intdelay_reg[2] <= 16'sb0000000000000000;
          end
          else begin
            intdelay_reg[0] <= intdelay_reg_next[0];
            intdelay_reg[1] <= intdelay_reg_next[1];
            intdelay_reg[2] <= intdelay_reg_next[2];
          end
        end
      end
    end

  assign din_1_1_re_dly = intdelay_reg[2];
  assign intdelay_reg_next[0] = dataIn;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];



  assign dtc_im = 16'sb0000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 16'sb0000000000000000;
        intdelay_reg_1[1] <= 16'sb0000000000000000;
        intdelay_reg_1[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_1[0] <= 16'sb0000000000000000;
            intdelay_reg_1[1] <= 16'sb0000000000000000;
            intdelay_reg_1[2] <= 16'sb0000000000000000;
          end
          else begin
            intdelay_reg_1[0] <= intdelay_reg_next_1[0];
            intdelay_reg_1[1] <= intdelay_reg_next_1[1];
            intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          end
        end
      end
    end

  assign din_1_1_im_dly = intdelay_reg_1[2];
  assign intdelay_reg_next_1[0] = dtc_im;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
        intdelay_reg_2[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_2[0] <= 1'b0;
            intdelay_reg_2[1] <= 1'b0;
            intdelay_reg_2[2] <= 1'b0;
          end
          else begin
            intdelay_reg_2[0] <= intdelay_reg_next_2[0];
            intdelay_reg_2[1] <= intdelay_reg_next_2[1];
            intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          end
        end
      end
    end

  assign din_1_vld_dly = intdelay_reg_2[2];
  assign intdelay_reg_next_2[0] = validIn;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];



  RADIX22FFT_CTRL1_1 u_CTRL1_1_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld),
                                  .dinXTwdl_1_1_vld_1(dinXTwdl_1_1_vld),
                                  .rd_1_Addr(rd_1_Addr),  // ufix9
                                  .rd_1_Enb(rd_1_Enb),
                                  .proc_1_enb(proc_1_enb)
                                  );

  RADIX22FFT_SDF1_1 u_SDF1_1_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .din_1_1_re_dly(din_1_1_re_dly),  // sfix16_En13
                                .din_1_1_im_dly(din_1_1_im_dly),  // sfix16_En13
                                .din_1_vld_dly(din_1_vld_dly),
                                .rd_1_Addr(rd_1_Addr),  // ufix9
                                .rd_1_Enb(rd_1_Enb),
                                .proc_1_enb(proc_1_enb),
                                .dout_1_1_re(dout_1_1_re),  // sfix17_En13
                                .dout_1_1_im(dout_1_1_im),  // sfix17_En13
                                .dout_1_1_vld(dout_1_1_vld),
                                .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld)
                                );

  RADIX22FFT_CTRL1_2 u_CTRL2_2_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dout_1_1_vld(dout_1_1_vld),
                                  .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld),
                                  .rd_2_Addr(rd_2_Addr),  // ufix8
                                  .rd_2_Enb(rd_2_Enb),
                                  .proc_2_enb(proc_2_enb),
                                  .multiply_2_J(multiply_2_J)
                                  );

  RADIX22FFT_SDF2_2 u_SDF2_2_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .dout_1_1_re(dout_1_1_re),  // sfix17_En13
                                .dout_1_1_im(dout_1_1_im),  // sfix17_En13
                                .dout_1_1_vld(dout_1_1_vld),
                                .rd_2_Addr(rd_2_Addr),  // ufix8
                                .rd_2_Enb(rd_2_Enb),
                                .proc_2_enb(proc_2_enb),
                                .multiply_2_J(multiply_2_J),
                                .dout_2_1_re(dout_2_1_re),  // sfix18_En13
                                .dout_2_1_im(dout_2_1_im),  // sfix18_En13
                                .dout_2_1_vld(dout_2_1_vld),
                                .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 18'sb000000000000000000;
        intdelay_reg_3[1] <= 18'sb000000000000000000;
        intdelay_reg_3[2] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_3[0] <= 18'sb000000000000000000;
            intdelay_reg_3[1] <= 18'sb000000000000000000;
            intdelay_reg_3[2] <= 18'sb000000000000000000;
          end
          else begin
            intdelay_reg_3[0] <= intdelay_reg_next_3[0];
            intdelay_reg_3[1] <= intdelay_reg_next_3[1];
            intdelay_reg_3[2] <= intdelay_reg_next_3[2];
          end
        end
      end
    end

  assign din_3_1_re_dly = intdelay_reg_3[2];
  assign intdelay_reg_next_3[0] = dout_2_1_re;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];
  assign intdelay_reg_next_3[2] = intdelay_reg_3[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 18'sb000000000000000000;
        intdelay_reg_4[1] <= 18'sb000000000000000000;
        intdelay_reg_4[2] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_4[0] <= 18'sb000000000000000000;
            intdelay_reg_4[1] <= 18'sb000000000000000000;
            intdelay_reg_4[2] <= 18'sb000000000000000000;
          end
          else begin
            intdelay_reg_4[0] <= intdelay_reg_next_4[0];
            intdelay_reg_4[1] <= intdelay_reg_next_4[1];
            intdelay_reg_4[2] <= intdelay_reg_next_4[2];
          end
        end
      end
    end

  assign din_3_1_im_dly = intdelay_reg_4[2];
  assign intdelay_reg_next_4[0] = dout_2_1_im;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];
  assign intdelay_reg_next_4[2] = intdelay_reg_4[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 1'b0;
        intdelay_reg_5[1] <= 1'b0;
        intdelay_reg_5[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_5[0] <= 1'b0;
            intdelay_reg_5[1] <= 1'b0;
            intdelay_reg_5[2] <= 1'b0;
          end
          else begin
            intdelay_reg_5[0] <= intdelay_reg_next_5[0];
            intdelay_reg_5[1] <= intdelay_reg_next_5[1];
            intdelay_reg_5[2] <= intdelay_reg_next_5[2];
          end
        end
      end
    end

  assign din_3_vld_dly = intdelay_reg_5[2];
  assign intdelay_reg_next_5[0] = dout_2_1_vld;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];
  assign intdelay_reg_next_5[2] = intdelay_reg_5[1];



  TWDLROM_3_1 u_twdlROM_3_1 (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                             .twdl_3_1_im(twdl_3_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_3 u_CTRL1_3_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld),
                                  .dinXTwdl_3_1_vld_1(dinXTwdl_3_1_vld),
                                  .rd_3_Addr(rd_3_Addr),  // ufix7
                                  .rd_3_Enb(rd_3_Enb),
                                  .proc_3_enb(proc_3_enb)
                                  );

  RADIX22FFT_SDF1_3 u_SDF1_3_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .din_3_1_re_dly(din_3_1_re_dly),  // sfix18_En13
                                .din_3_1_im_dly(din_3_1_im_dly),  // sfix18_En13
                                .din_3_vld_dly(din_3_vld_dly),
                                .rd_3_Addr(rd_3_Addr),  // ufix7
                                .rd_3_Enb(rd_3_Enb),
                                .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                                .twdl_3_1_im(twdl_3_1_im),  // sfix16_En14
                                .proc_3_enb(proc_3_enb),
                                .dout_3_1_re(dout_3_1_re),  // sfix19_En13
                                .dout_3_1_im(dout_3_1_im),  // sfix19_En13
                                .dout_3_1_vld(dout_3_1_vld),
                                .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld)
                                );

  RADIX22FFT_CTRL1_4 u_CTRL2_4_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dout_3_1_vld(dout_3_1_vld),
                                  .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld),
                                  .rd_4_Addr(rd_4_Addr),  // ufix6
                                  .rd_4_Enb(rd_4_Enb),
                                  .proc_4_enb(proc_4_enb),
                                  .multiply_4_J(multiply_4_J)
                                  );

  RADIX22FFT_SDF2_4 u_SDF2_4_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .dout_3_1_re(dout_3_1_re),  // sfix19_En13
                                .dout_3_1_im(dout_3_1_im),  // sfix19_En13
                                .dout_3_1_vld(dout_3_1_vld),
                                .rd_4_Addr(rd_4_Addr),  // ufix6
                                .rd_4_Enb(rd_4_Enb),
                                .proc_4_enb(proc_4_enb),
                                .multiply_4_J(multiply_4_J),
                                .dout_4_1_re(dout_4_1_re),  // sfix20_En13
                                .dout_4_1_im(dout_4_1_im),  // sfix20_En13
                                .dout_4_1_vld(dout_4_1_vld),
                                .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6[0] <= 20'sb00000000000000000000;
        intdelay_reg_6[1] <= 20'sb00000000000000000000;
        intdelay_reg_6[2] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_6[0] <= 20'sb00000000000000000000;
            intdelay_reg_6[1] <= 20'sb00000000000000000000;
            intdelay_reg_6[2] <= 20'sb00000000000000000000;
          end
          else begin
            intdelay_reg_6[0] <= intdelay_reg_next_6[0];
            intdelay_reg_6[1] <= intdelay_reg_next_6[1];
            intdelay_reg_6[2] <= intdelay_reg_next_6[2];
          end
        end
      end
    end

  assign din_5_1_re_dly = intdelay_reg_6[2];
  assign intdelay_reg_next_6[0] = dout_4_1_re;
  assign intdelay_reg_next_6[1] = intdelay_reg_6[0];
  assign intdelay_reg_next_6[2] = intdelay_reg_6[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        intdelay_reg_7[0] <= 20'sb00000000000000000000;
        intdelay_reg_7[1] <= 20'sb00000000000000000000;
        intdelay_reg_7[2] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_7[0] <= 20'sb00000000000000000000;
            intdelay_reg_7[1] <= 20'sb00000000000000000000;
            intdelay_reg_7[2] <= 20'sb00000000000000000000;
          end
          else begin
            intdelay_reg_7[0] <= intdelay_reg_next_7[0];
            intdelay_reg_7[1] <= intdelay_reg_next_7[1];
            intdelay_reg_7[2] <= intdelay_reg_next_7[2];
          end
        end
      end
    end

  assign din_5_1_im_dly = intdelay_reg_7[2];
  assign intdelay_reg_next_7[0] = dout_4_1_im;
  assign intdelay_reg_next_7[1] = intdelay_reg_7[0];
  assign intdelay_reg_next_7[2] = intdelay_reg_7[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8[0] <= 1'b0;
        intdelay_reg_8[1] <= 1'b0;
        intdelay_reg_8[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_8[0] <= 1'b0;
            intdelay_reg_8[1] <= 1'b0;
            intdelay_reg_8[2] <= 1'b0;
          end
          else begin
            intdelay_reg_8[0] <= intdelay_reg_next_8[0];
            intdelay_reg_8[1] <= intdelay_reg_next_8[1];
            intdelay_reg_8[2] <= intdelay_reg_next_8[2];
          end
        end
      end
    end

  assign din_5_vld_dly = intdelay_reg_8[2];
  assign intdelay_reg_next_8[0] = dout_4_1_vld;
  assign intdelay_reg_next_8[1] = intdelay_reg_8[0];
  assign intdelay_reg_next_8[2] = intdelay_reg_8[1];



  TWDLROM_5_1 u_twdlROM_5_1 (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                             .twdl_5_1_im(twdl_5_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_5 u_CTRL1_5_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld),
                                  .dinXTwdl_5_1_vld_1(dinXTwdl_5_1_vld),
                                  .rd_5_Addr(rd_5_Addr),  // ufix5
                                  .rd_5_Enb(rd_5_Enb),
                                  .proc_5_enb(proc_5_enb)
                                  );

  RADIX22FFT_SDF1_5 u_SDF1_5_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .din_5_1_re_dly(din_5_1_re_dly),  // sfix20_En13
                                .din_5_1_im_dly(din_5_1_im_dly),  // sfix20_En13
                                .din_5_vld_dly(din_5_vld_dly),
                                .rd_5_Addr(rd_5_Addr),  // ufix5
                                .rd_5_Enb(rd_5_Enb),
                                .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                                .twdl_5_1_im(twdl_5_1_im),  // sfix16_En14
                                .proc_5_enb(proc_5_enb),
                                .dout_5_1_re(dout_5_1_re),  // sfix21_En13
                                .dout_5_1_im(dout_5_1_im),  // sfix21_En13
                                .dout_5_1_vld(dout_5_1_vld),
                                .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld)
                                );

  RADIX22FFT_CTRL1_6 u_CTRL2_6_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dout_5_1_vld(dout_5_1_vld),
                                  .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld),
                                  .rd_6_Addr(rd_6_Addr),  // ufix4
                                  .rd_6_Enb(rd_6_Enb),
                                  .proc_6_enb(proc_6_enb),
                                  .multiply_6_J(multiply_6_J)
                                  );

  RADIX22FFT_SDF2_6 u_SDF2_6_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .dout_5_1_re(dout_5_1_re),  // sfix21_En13
                                .dout_5_1_im(dout_5_1_im),  // sfix21_En13
                                .dout_5_1_vld(dout_5_1_vld),
                                .rd_6_Addr(rd_6_Addr),  // ufix4
                                .rd_6_Enb(rd_6_Enb),
                                .proc_6_enb(proc_6_enb),
                                .multiply_6_J(multiply_6_J),
                                .dout_6_1_re(dout_6_1_re),  // sfix22_En13
                                .dout_6_1_im(dout_6_1_im),  // sfix22_En13
                                .dout_6_1_vld(dout_6_1_vld),
                                .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        intdelay_reg_9[0] <= 22'sb0000000000000000000000;
        intdelay_reg_9[1] <= 22'sb0000000000000000000000;
        intdelay_reg_9[2] <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_9[0] <= 22'sb0000000000000000000000;
            intdelay_reg_9[1] <= 22'sb0000000000000000000000;
            intdelay_reg_9[2] <= 22'sb0000000000000000000000;
          end
          else begin
            intdelay_reg_9[0] <= intdelay_reg_next_9[0];
            intdelay_reg_9[1] <= intdelay_reg_next_9[1];
            intdelay_reg_9[2] <= intdelay_reg_next_9[2];
          end
        end
      end
    end

  assign din_7_1_re_dly = intdelay_reg_9[2];
  assign intdelay_reg_next_9[0] = dout_6_1_re;
  assign intdelay_reg_next_9[1] = intdelay_reg_9[0];
  assign intdelay_reg_next_9[2] = intdelay_reg_9[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        intdelay_reg_10[0] <= 22'sb0000000000000000000000;
        intdelay_reg_10[1] <= 22'sb0000000000000000000000;
        intdelay_reg_10[2] <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_10[0] <= 22'sb0000000000000000000000;
            intdelay_reg_10[1] <= 22'sb0000000000000000000000;
            intdelay_reg_10[2] <= 22'sb0000000000000000000000;
          end
          else begin
            intdelay_reg_10[0] <= intdelay_reg_next_10[0];
            intdelay_reg_10[1] <= intdelay_reg_next_10[1];
            intdelay_reg_10[2] <= intdelay_reg_next_10[2];
          end
        end
      end
    end

  assign din_7_1_im_dly = intdelay_reg_10[2];
  assign intdelay_reg_next_10[0] = dout_6_1_im;
  assign intdelay_reg_next_10[1] = intdelay_reg_10[0];
  assign intdelay_reg_next_10[2] = intdelay_reg_10[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        intdelay_reg_11[0] <= 1'b0;
        intdelay_reg_11[1] <= 1'b0;
        intdelay_reg_11[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_11[0] <= 1'b0;
            intdelay_reg_11[1] <= 1'b0;
            intdelay_reg_11[2] <= 1'b0;
          end
          else begin
            intdelay_reg_11[0] <= intdelay_reg_next_11[0];
            intdelay_reg_11[1] <= intdelay_reg_next_11[1];
            intdelay_reg_11[2] <= intdelay_reg_next_11[2];
          end
        end
      end
    end

  assign din_7_vld_dly = intdelay_reg_11[2];
  assign intdelay_reg_next_11[0] = dout_6_1_vld;
  assign intdelay_reg_next_11[1] = intdelay_reg_11[0];
  assign intdelay_reg_next_11[2] = intdelay_reg_11[1];



  TWDLROM_7_1 u_twdlROM_7_1 (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_1_re(twdl_7_1_re),  // sfix16_En14
                             .twdl_7_1_im(twdl_7_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_7 u_CTRL1_7_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld),
                                  .dinXTwdl_7_1_vld_1(dinXTwdl_7_1_vld),
                                  .rd_7_Addr(rd_7_Addr),  // ufix3
                                  .rd_7_Enb(rd_7_Enb),
                                  .proc_7_enb(proc_7_enb)
                                  );

  RADIX22FFT_SDF1_7 u_SDF1_7_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .din_7_1_re_dly(din_7_1_re_dly),  // sfix22_En13
                                .din_7_1_im_dly(din_7_1_im_dly),  // sfix22_En13
                                .din_7_vld_dly(din_7_vld_dly),
                                .rd_7_Addr(rd_7_Addr),  // ufix3
                                .rd_7_Enb(rd_7_Enb),
                                .twdl_7_1_re(twdl_7_1_re),  // sfix16_En14
                                .twdl_7_1_im(twdl_7_1_im),  // sfix16_En14
                                .proc_7_enb(proc_7_enb),
                                .dout_7_1_re(dout_7_1_re),  // sfix23_En13
                                .dout_7_1_im(dout_7_1_im),  // sfix23_En13
                                .dout_7_1_vld(dout_7_1_vld),
                                .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld)
                                );

  RADIX22FFT_CTRL1_8 u_CTRL2_8_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dout_7_1_vld(dout_7_1_vld),
                                  .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld),
                                  .rd_8_Addr(rd_8_Addr),  // ufix2
                                  .rd_8_Enb(rd_8_Enb),
                                  .proc_8_enb(proc_8_enb),
                                  .multiply_8_J(multiply_8_J)
                                  );

  RADIX22FFT_SDF2_8 u_SDF2_8_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .dout_7_1_re(dout_7_1_re),  // sfix23_En13
                                .dout_7_1_im(dout_7_1_im),  // sfix23_En13
                                .dout_7_1_vld(dout_7_1_vld),
                                .rd_8_Addr(rd_8_Addr),  // ufix2
                                .rd_8_Enb(rd_8_Enb),
                                .proc_8_enb(proc_8_enb),
                                .multiply_8_J(multiply_8_J),
                                .dout_8_1_re(dout_8_1_re),  // sfix24_En13
                                .dout_8_1_im(dout_8_1_im),  // sfix24_En13
                                .dout_8_1_vld(dout_8_1_vld),
                                .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        intdelay_reg_12[0] <= 24'sb000000000000000000000000;
        intdelay_reg_12[1] <= 24'sb000000000000000000000000;
        intdelay_reg_12[2] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_12[0] <= 24'sb000000000000000000000000;
            intdelay_reg_12[1] <= 24'sb000000000000000000000000;
            intdelay_reg_12[2] <= 24'sb000000000000000000000000;
          end
          else begin
            intdelay_reg_12[0] <= intdelay_reg_next_12[0];
            intdelay_reg_12[1] <= intdelay_reg_next_12[1];
            intdelay_reg_12[2] <= intdelay_reg_next_12[2];
          end
        end
      end
    end

  assign din_9_1_re_dly = intdelay_reg_12[2];
  assign intdelay_reg_next_12[0] = dout_8_1_re;
  assign intdelay_reg_next_12[1] = intdelay_reg_12[0];
  assign intdelay_reg_next_12[2] = intdelay_reg_12[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        intdelay_reg_13[0] <= 24'sb000000000000000000000000;
        intdelay_reg_13[1] <= 24'sb000000000000000000000000;
        intdelay_reg_13[2] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_13[0] <= 24'sb000000000000000000000000;
            intdelay_reg_13[1] <= 24'sb000000000000000000000000;
            intdelay_reg_13[2] <= 24'sb000000000000000000000000;
          end
          else begin
            intdelay_reg_13[0] <= intdelay_reg_next_13[0];
            intdelay_reg_13[1] <= intdelay_reg_next_13[1];
            intdelay_reg_13[2] <= intdelay_reg_next_13[2];
          end
        end
      end
    end

  assign din_9_1_im_dly = intdelay_reg_13[2];
  assign intdelay_reg_next_13[0] = dout_8_1_im;
  assign intdelay_reg_next_13[1] = intdelay_reg_13[0];
  assign intdelay_reg_next_13[2] = intdelay_reg_13[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        intdelay_reg_14[0] <= 1'b0;
        intdelay_reg_14[1] <= 1'b0;
        intdelay_reg_14[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_14[0] <= 1'b0;
            intdelay_reg_14[1] <= 1'b0;
            intdelay_reg_14[2] <= 1'b0;
          end
          else begin
            intdelay_reg_14[0] <= intdelay_reg_next_14[0];
            intdelay_reg_14[1] <= intdelay_reg_next_14[1];
            intdelay_reg_14[2] <= intdelay_reg_next_14[2];
          end
        end
      end
    end

  assign din_9_vld_dly = intdelay_reg_14[2];
  assign intdelay_reg_next_14[0] = dout_8_1_vld;
  assign intdelay_reg_next_14[1] = intdelay_reg_14[0];
  assign intdelay_reg_next_14[2] = intdelay_reg_14[1];



  TWDLROM_9_1 u_twdlROM_9_1 (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .dout_8_1_vld(dout_8_1_vld),
                             .twdl_9_1_re(twdl_9_1_re),  // sfix16_En14
                             .twdl_9_1_im(twdl_9_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_9 u_CTRL1_9_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dinXTwdl_9_1_vld(dinXTwdl_9_1_vld),
                                  .dinXTwdl_9_1_vld_1(dinXTwdl_9_1_vld),
                                  .rd_9_Addr(rd_9_Addr),  // ufix1
                                  .rd_9_Enb(rd_9_Enb),
                                  .proc_9_enb(proc_9_enb)
                                  );

  RADIX22FFT_SDF1_9 u_SDF1_9_1 (.clk(clk),
                                .reset(reset),
                                .enb(enb),
                                .din_9_1_re_dly(din_9_1_re_dly),  // sfix24_En13
                                .din_9_1_im_dly(din_9_1_im_dly),  // sfix24_En13
                                .din_9_vld_dly(din_9_vld_dly),
                                .rd_9_Addr(rd_9_Addr),  // ufix1
                                .rd_9_Enb(rd_9_Enb),
                                .twdl_9_1_re(twdl_9_1_re),  // sfix16_En14
                                .twdl_9_1_im(twdl_9_1_im),  // sfix16_En14
                                .proc_9_enb(proc_9_enb),
                                .dout_9_1_re(dout_9_1_re),  // sfix25_En13
                                .dout_9_1_im(dout_9_1_im),  // sfix25_En13
                                .dout_9_1_vld(dout_9_1_vld),
                                .dinXTwdl_9_1_vld(dinXTwdl_9_1_vld)
                                );

  RADIX22FFT_CTRL1_10 u_CTRL2_10_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dout_9_1_vld(dout_9_1_vld),
                                    .dinXTwdl_10_1_vld(dinXTwdl_10_1_vld),
                                    .rd_10_Addr(rd_10_Addr),
                                    .rd_10_Enb(rd_10_Enb),
                                    .proc_10_enb(proc_10_enb),
                                    .multiply_10_J(multiply_10_J)
                                    );

  RADIX22FFT_SDF2_10 u_SDF2_10_1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dout_9_1_re(dout_9_1_re),  // sfix25_En13
                                  .dout_9_1_im(dout_9_1_im),  // sfix25_En13
                                  .dout_9_1_vld(dout_9_1_vld),
                                  .rd_10_Addr(rd_10_Addr),
                                  .rd_10_Enb(rd_10_Enb),
                                  .proc_10_enb(proc_10_enb),
                                  .multiply_10_J(multiply_10_J),
                                  .dout_10_1_re(dout_10_1_re),  // sfix26_En13
                                  .dout_10_1_im(dout_10_1_im),  // sfix26_En13
                                  .dout_10_1_vld(dout_10_1_vld),
                                  .dinXTwdl_10_1_vld(dinXTwdl_10_1_vld)
                                  );

  RADIX2FFT_bitNatural u_NaturalOrder_Stage (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .dout_10_1_re(dout_10_1_re),  // sfix26_En13
                                             .dout_10_1_im(dout_10_1_im),  // sfix26_En13
                                             .dout_10_1_vld(dout_10_1_vld),
                                             .dout_re1(dout_re1),  // sfix26_En13
                                             .dout_im1(dout_im1),  // sfix26_En13
                                             .dout_vld1(dout_vld1)
                                             );

  assign dataOut_re = dout_re1;

  assign dataOut_im = dout_im1;

  assign validOut = dout_vld1;

endmodule  // FFT

