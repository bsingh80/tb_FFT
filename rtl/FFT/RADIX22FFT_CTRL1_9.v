// -------------------------------------------------------------
// 
// File Name: hdlsrc\tb_FFT\RADIX22FFT_CTRL1_9.v
// Created: 2023-02-08 00:35:50
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX22FFT_CTRL1_9
// Source Path: tb_FFT/DUT/FFT/RADIX22FFT_CTRL1_9
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX22FFT_CTRL1_9
          (clk,
           reset,
           enb,
           dinXTwdl_9_1_vld,
           dinXTwdl_9_1_vld_1,
           rd_9_Addr,
           rd_9_Enb,
           proc_9_enb);


  input   clk;
  input   reset;
  input   enb;
  input   dinXTwdl_9_1_vld;
  input   dinXTwdl_9_1_vld_1;
  output  rd_9_Addr;  // ufix1
  output  rd_9_Enb;
  output  proc_9_enb;


  reg  SDFController_wrCount;  // ufix1
  reg [1:0] SDFController_wrState;  // ufix2
  reg [1:0] SDFController_rdState;  // ufix2
  reg  SDFController_rdAddr_reg;  // ufix1
  reg  SDFController_procEnb_reg;
  reg [1:0] SDFController_multjState;  // ufix2
  reg  SDFController_multiply_J_reg;
  reg  SDFController_wrCount_next;  // ufix1
  reg [1:0] SDFController_wrState_next;  // ufix2
  reg [1:0] SDFController_rdState_next;  // ufix2
  reg  SDFController_rdAddr_reg_next;  // ufix1
  reg  SDFController_procEnb_reg_next;
  reg [1:0] SDFController_multjState_next;  // ufix2
  reg  SDFController_multiply_J_reg_next;
  reg  rd_9_Addr_1;  // ufix1
  reg  rd_9_Enb_1;
  reg  proc_9_enb_1;
  reg  multiply_9_J;


  // SDFController
  always @(posedge clk or posedge reset)
    begin : SDFController_process
      if (reset == 1'b1) begin
        SDFController_wrCount <= 1'b0;
        SDFController_rdAddr_reg <= 1'b0;
        SDFController_wrState <= 2'b00;
        SDFController_rdState <= 2'b00;
        SDFController_multjState <= 2'b00;
        SDFController_procEnb_reg <= 1'b0;
        SDFController_multiply_J_reg <= 1'b0;
      end
      else begin
        if (enb) begin
          SDFController_wrCount <= SDFController_wrCount_next;
          SDFController_wrState <= SDFController_wrState_next;
          SDFController_rdState <= SDFController_rdState_next;
          SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
          SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
          SDFController_multjState <= SDFController_multjState_next;
          SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
        end
      end
    end

  always @(SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_9_1_vld, dinXTwdl_9_1_vld_1) begin
    SDFController_wrCount_next = SDFController_wrCount;
    SDFController_wrState_next = SDFController_wrState;
    SDFController_rdState_next = SDFController_rdState;
    SDFController_rdAddr_reg_next = SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next = SDFController_procEnb_reg;
    SDFController_multjState_next = SDFController_multjState;
    SDFController_multiply_J_reg_next = SDFController_multiply_J_reg;
    case ( SDFController_multjState)
      2'b00 :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b01;
          end
        end
      2'b01 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b10) begin
            SDFController_multjState_next = 2'b10;
          end
        end
      2'b10 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
        end
      2'b11 :
        begin
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
          else begin
            SDFController_multiply_J_reg_next = 1'b0;
            SDFController_multjState_next = 2'b00;
          end
        end
      default :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
        end
    endcase
    case ( SDFController_rdState)
      2'b00 :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 1'b0;
          rd_9_Enb_1 = 1'b0;
          if (SDFController_procEnb_reg) begin
            SDFController_rdState_next = 2'b01;
            rd_9_Enb_1 = dinXTwdl_9_1_vld_1;
            if (dinXTwdl_9_1_vld_1) begin
              SDFController_rdAddr_reg_next = 1'b1;
            end
          end
        end
      2'b01 :
        begin
          SDFController_rdState_next = 2'b01;
          rd_9_Enb_1 = dinXTwdl_9_1_vld_1;
          if (dinXTwdl_9_1_vld_1) begin
            if (SDFController_rdAddr_reg == 1'b1) begin
              SDFController_rdState_next = 2'b10;
              SDFController_rdAddr_reg_next = 1'b0;
            end
            else begin
              SDFController_rdAddr_reg_next = 1'b1;
            end
          end
        end
      2'b10 :
        begin
          rd_9_Enb_1 = 1'b0;
          if (SDFController_rdAddr_reg == 1'b1) begin
            SDFController_rdAddr_reg_next = 1'b0;
            if (SDFController_procEnb_reg) begin
              SDFController_rdState_next = 2'b01;
            end
            else begin
              SDFController_rdState_next = 2'b00;
            end
          end
          else begin
            SDFController_rdAddr_reg_next = 1'b1;
          end
        end
      default :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 1'b0;
          rd_9_Enb_1 = 1'b0;
        end
    endcase
    case ( SDFController_wrState)
      2'b00 :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 1'b0;
          SDFController_procEnb_reg_next = 1'b0;
          if (dinXTwdl_9_1_vld) begin
            SDFController_wrState_next = 2'b01;
            SDFController_wrCount_next = 1'b1;
          end
        end
      2'b01 :
        begin
          SDFController_wrState_next = 2'b01;
          SDFController_procEnb_reg_next = 1'b0;
          if (dinXTwdl_9_1_vld) begin
            SDFController_wrState_next = 2'b10;
            SDFController_procEnb_reg_next = 1'b1;
            SDFController_wrCount_next = 1'b0;
          end
        end
      2'b10 :
        begin
          SDFController_wrState_next = 2'b10;
          SDFController_procEnb_reg_next = 1'b1;
          if (dinXTwdl_9_1_vld) begin
            if (SDFController_wrCount == 1'b1) begin
              SDFController_wrState_next = 2'b00;
              SDFController_procEnb_reg_next = 1'b0;
              SDFController_wrCount_next = 1'b0;
            end
            else begin
              SDFController_wrCount_next = 1'b1;
            end
          end
        end
      default :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 1'b0;
          SDFController_procEnb_reg_next = 1'b0;
        end
    endcase
    rd_9_Addr_1 = SDFController_rdAddr_reg;
    proc_9_enb_1 = SDFController_procEnb_reg;
    multiply_9_J = SDFController_multiply_J_reg;
  end



  assign rd_9_Addr = rd_9_Addr_1;

  assign rd_9_Enb = rd_9_Enb_1;

  assign proc_9_enb = proc_9_enb_1;

endmodule  // RADIX22FFT_CTRL1_9

